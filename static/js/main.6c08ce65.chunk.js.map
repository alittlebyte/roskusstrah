{"version":3,"sources":["store/store.js","components/App.js","index.js"],"names":["initState","repos","store","createStore","state","action","type","payload","applyMiddleware","thunk","App","handleRepos","e","preventDefault","props","listRepos","document","querySelector","value","this","console","log","className","onSubmit","placeholder","id","Component","connect","usr","dispatch","user","axios","get","fetchRepos","then","res","data","render","getElementById"],"mappings":"wPASMA,EAAY,CACjBC,MAAO,IAkCOC,EALDC,aAjBM,WAAgC,IAA/BC,EAA8B,uDAAtBJ,EAAWK,EAAW,uCAClD,OAAOA,EAAOC,MACb,IAAK,aACJ,MAAO,CACNL,MAAOI,EAAOE,SAEhB,QACC,OAAOH,KAYTI,YAAgBC,MCrCXC,E,4MACJC,YAAc,SAAAC,GACZA,EAAEC,iBACF,EAAKC,MAAMC,UAAUC,SAASC,cAAc,SAASC,Q,kEAIrDC,KAAKL,MAAMC,c,+BAKX,OADAK,QAAQC,IAAIF,KAAKL,OAEf,6BACE,0BAAMQ,UAAU,aAAaC,SAAUJ,KAAKR,aAC1C,2BAAOa,YAAY,6BAA6BC,GAAG,OAAOnB,KAAK,SAC/D,2BAAOA,KAAK,SAASY,MAAM,SAE7B,yBAAKI,UAAU,aACb,+DACA,qEACA,4BACE,yC,GAtBMI,aAkCHC,eAJS,SAAAvB,GAAK,MAAK,CAChCH,MAAOG,EAAMH,SAGwB,CAACc,UDJf,SAACa,GAAD,OAAS,SAAAC,GACjC,OA9BkB,WAA2B,IAA1BC,EAAyB,uDAAlB,cAC1B,OAAOC,IAAMC,IAAN,uCAA0CF,EAA1C,WA6BAG,CAAWL,GAAKM,MAAK,SAAAC,GAAG,OAAIN,EApB5B,CACNvB,KAAM,aACNC,QAkBqD4B,EAAIC,aCG5CT,CAAqCjB,GChCpD2B,iBACC,kBAAC,IAAD,CAAUnC,MAAOA,GAChB,kBAAC,EAAD,OAEDc,SAASsB,eAAe,W","file":"static/js/main.6c08ce65.chunk.js","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport axios from 'axios';\r\n\r\n//DB request\r\nconst fetchRepos = (user = 'alittlebyte') => {\r\n\treturn axios.get(`https://api.github.com/users/${user}/repos`)\r\n}\r\n//initial state\r\nconst initState = {\r\n\trepos: []\r\n}\r\n\r\n//actions\r\nconst loadRepos = request => {\r\n\treturn {\r\n\t\ttype: 'LOAD_REPOS',\r\n\t\tpayload:request\r\n\t}\r\n}\r\n\r\n//reducers\r\nconst reduceRepos = (state = initState, action) => {\r\n\tswitch(action.type){\r\n\t\tcase 'LOAD_REPOS':\r\n\t\t\treturn {\r\n\t\t\t\trepos: action.payload\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\n//action creators\r\nexport const listRepos = (usr) => dispatch => {\r\n\treturn fetchRepos(usr).then(res => dispatch(loadRepos(res.data)))\r\n}\r\n\r\n//store\r\nconst store = createStore(\r\n\treduceRepos, \r\n\tapplyMiddleware(thunk)\r\n);\r\n\r\nexport default store;","import React, {Component} from 'react'\nimport { connect } from 'react-redux'\nimport { listRepos } from '../store/store.js'\n\nclass App extends Component {\n  handleRepos = e => {\n    e.preventDefault()\n    this.props.listRepos(document.querySelector('#repo').value)\n  }\n\n  componentDidMount(){\n    this.props.listRepos()\n  }\n\n  render () {\n    console.log(this.props)\n    return (\n      <div>\n        <form className='search-bar' onSubmit={this.handleRepos}>\n          <input placeholder=\"Enter a Github User's name\" id=\"repo\" type='text' />\n          <input type=\"submit\" value=\"QS!\" />\n        </form>\n        <div className='repo-list'>\n          <h4>List of available repositories:</h4>\n          <p>(click on any repo to visit on GitHub)</p>\n          <ul>\n            <li>Qs</li>\n          </ul>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  repos: state.repos\n})\n\nexport default connect(mapStateToProps,{listRepos})(App)","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport store from './store/store.js';\n\nrender(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);"],"sourceRoot":""}